package xjsnark.rsa;

/*Generated by MPS */

import backend.structure.CircuitGenerator;
import backend.eval.SampleRun;
import java.math.BigInteger;
import backend.auxTypes.UnsignedInteger;
import backend.auxTypes.Bit;
import backend.auxTypes.ConditionalScopeTracker;
import backend.eval.CircuitEvaluator;

public class RSAModExpFullyVariable extends CircuitGenerator {



  public static void main(String[] args) {

    // This is the java main method. Its purpose is to make the Progam runnable in the environment 
    // This method can be left empty, or used to set Configuration params (see examples) 
    new RSAModExpFullyVariable();
  }

  public RSAModExpFullyVariable() {
    super("RSAModExpFullyVariable");
    __generateCircuit();
    this.__evaluateSampleRun(new SampleRun("Sample_Run1", true) {
      public void pre() {
        a.mapValue(new BigInteger("14622490781538377313046027984667565122001734301737993489240620299325830434011417032238876653456789361374620067300504413687155387982606047070437359120367768168959125133675417540948360335680860943360905070465320835303881014453576538443090748146681767859059104596160872939472318690408344317048613990009207689344764129416291964384018336815262546357393880504735389218689592018660082734565461532427974021588948938549652153069532368867013364841834569598713417519090233588942086054164559535453419403829125660164918847030913422963137212450839649779730816926161245008007959778599791254118526950556847883189689898829520513422592"), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        exponent.mapValue(new BigInteger("10001", 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        mod.mapValue(new BigInteger("5463546356345635463456435624564573568356735673673567365736573567834586356356734568353475673567483576365834567848356736836584696365262563573568657635"), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());

      }
      public void post() {
        BigInteger a = new BigInteger("14622490781538377313046027984667565122001734301737993489240620299325830434011417032238876653456789361374620067300504413687155387982606047070437359120367768168959125133675417540948360335680860943360905070465320835303881014453576538443090748146681767859059104596160872939472318690408344317048613990009207689344764129416291964384018336815262546357393880504735389218689592018660082734565461532427974021588948938549652153069532368867013364841834569598713417519090233588942086054164559535453419403829125660164918847030913422963137212450839649779730816926161245008007959778599791254118526950556847883189689898829520513422592");
        BigInteger modulus = new BigInteger("25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357");
        System.out.println(((b.getValueFromEvaluator(CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator()).equals(a.modPow(BigInteger.valueOf(0x10001), modulus))) ? "Sample Test Passed!" : "Sample Test Failed"));
      }

    });

  }



  public void __init() {
    a = new UnsignedInteger(2048, new BigInteger("0"));
    exponent = new UnsignedInteger(32, new BigInteger("0"));
    mod = new UnsignedInteger(2048, new BigInteger("0"));
    b = new UnsignedInteger(2048, new BigInteger("0"));
  }

  private UnsignedInteger a;
  private UnsignedInteger exponent;
  private UnsignedInteger mod;
  private UnsignedInteger b;

  @Override
  public void __defineInputs() {
    super.__defineInputs();
    a = UnsignedInteger.createInput(this, 2048);
    exponent = UnsignedInteger.createInput(this, 32);
    mod = UnsignedInteger.createInput(this, 2048);















  }
  @Override
  public void __defineOutputs() {
    super.__defineOutputs();
    UnsignedInteger.makeOutput(this, b);









  }
  @Override
  public void __defineVerifiedWitnesses() {
    super.__defineVerifiedWitnesses();



















  }
  @Override
  public void __defineWitnesses() {
    super.__defineWitnesses();

















  }
  public void outsource() {
    b.assign(new UnsignedInteger(2048, new BigInteger("1")), 2048);
    Bit[] expBits = exponent.getBitElements();
    for (int i = expBits.length - 1; i >= 0; i--) {
      b.assign(b.mul(b), 2048);
      {
        Bit bit_b0c0v = expBits[i].copy();
        boolean c_b0c0v = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_b0c0v);
        if (c_b0c0v) {
          if (bit_b0c0v.getConstantValue()) {
            b.assign(b.mul(a), 2048);
          } else {

          }
        } else {
          ConditionalScopeTracker.pushMain();
          ConditionalScopeTracker.push(bit_b0c0v);
          b.assign(b.mul(a), 2048);

          ConditionalScopeTracker.pop();

          ConditionalScopeTracker.push(new Bit(true));

          ConditionalScopeTracker.pop();
          ConditionalScopeTracker.popMain();
        }

      }
    }
  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
